generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  password   String
  name       String?
  phone      String?
  address    String?
  postalCode String?     @map("postal_code")
  birthDate  DateTime?   @map("birth_date")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  resetTokens ResetToken[]
  carts       Cart[]     // Relación inversa hacia Cart
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  price       Float
  originalPrice      Float?    @map("original_price")
  images      String[]
  mainImage   String     @map("main_image") // ← CAMPO AÑADIDO
  stock       Int        @default(0)
  stockQuantity Int?     @map("stock_quantity") // ← CAMPO AÑADIDO (alias)
  category    String
  subcategory String?
  brand       String?    // ← CAMPO AÑADIDO
  featured    Boolean    @default(false)
  discountPercentage Int? @map("discount_percentage") // ← CAMPO AÑADIDO
  rating      Float?     @default(0) // ← CAMPO AÑADIDO
  reviewCount Int?       @map("review_count") @default(0) // ← CAMPO AÑADIDO
  specifications Json?   // ← CAMPO AÑADIDO (JSON para especificaciones técnicas)
  sizes       String[]
  colors      String[]
    measures Json? // ← Medidas específicas por talle
  sizeGuide String? @map("size_guide") // ← Guía de talles general
  fit          String?
  inStock     Boolean    @map("in_stock") @default(true) // ← CAMPO AÑADIDO
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  cartItems   CartItem[] // Relación inversa

}

model Cart {
  id       Int        @id @default(autoincrement())
  user     User       @relation(fields: [userId], references: [id])
  userId   Int        @unique
  CartItem CartItem[]
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId], name: "cartId_productId")
}

model ResetToken {
  id      Int      @id @default(autoincrement())
  token   String   @unique
  userId  Int
  expires DateTime
  user    User     @relation(fields: [userId], references: [id])
}

model SizeGuide {
  id          Int      @id @default(autoincrement())
  category    String   // "mujer", "hombre", "ninos"
  subcategory String?  // "tops", "pantalones", etc.
  measures    Json     // Guía de talles general para la categoría
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductMeasure {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  size      String  // "S", "M", "L", etc.
  measures  Json    // { "largo": 70, "ancho": 50, "manga": 60 }
  
  @@unique([productId, size])
}